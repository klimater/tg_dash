import asyncio
import logging

from CONFIG.config import TOKKEN

import keyboards.keyboards as kb
import states as states
import data_base.database as BD

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

bot = Bot(token=TOKKEN)
dp = Dispatcher()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("""
–ü—Ä–∏–≤–µ—Ç —è –±–æ—Çü§ñ —É—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–∞–ª–¥–µ.
–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É!
""", reply_markup=kb.main_menu)

#–∫–æ–º–∞–Ω–¥–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_main(message: Message):
    await message.answer("""
–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?
""", reply_markup = kb.menu)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç "–°–≤–æ–¥–∫–∞üìä"
@dp.message(F.text == "–°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—åüìä")
async def message_svodka(message: Message):
    await message.answer(" –°–í–û–î–ö–ê", reply_markup = kb.main_menu)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—èüìù"
@dp.message(F.text == "–î–µ–π—Å—Ç–≤–∏—èüìù")
async def message_action(message: Message):
    await message.answer("–¥–∞–Ω–Ω—ã–µ", reply_markup = kb.action)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
async def message_svodka(message: Message, state: FSMContext):
    await state.set_state(states.add_sels.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏ dd.mm.yyyy")

@dp.message(states.add_sels.date)
async def add_sele(message: Message, state: FSMContext):
    await state.update_data(date = message.text)
    await state.set_state(states.add_sels.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

@dp.message(states.add_sels.name)
async def message_svodka(message: Message, state: FSMContext):
    await state.update_data(name = message.text)
    await state.set_state(states.add_sels.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup = kb.category_but)

@dp.message(states.add_sels.category)
async def message_svodka(message: Message, state: FSMContext):
    await state.update_data(category = message.text)
    await state.set_state(states.add_sels.quantity)
    await message.answer("–í–í–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–æ —Ç–æ–≤–∞—Ä–∞")

@dp.message(states.add_sels.quantity)
async def message_svodka(message: Message, state: FSMContext):
    await state.update_data(quantity = message.text)
    await state.set_state(states.add_sels.cost)
    await message.answer("–í–í–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∞–≤–∞—Ä–∞")

@dp.message(states.add_sels.cost)
async def message_svodka(message: Message, state: FSMContext):
    await state.update_data(cost = message.text)
    data = await state.get_data()
    await message.answer(BD.add_sale_bd(data["date"], data['name'], data['category'], data['quantity'], data['cost']))

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å")
async def message_svodka(message: Message):
    await message.answer(" –°–í–û–î–ö–ê", reply_markup= kb.menu)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logging.info("Bot is starting...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("exit")